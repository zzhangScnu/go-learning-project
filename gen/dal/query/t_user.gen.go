// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"github.com/go-learning-project/gen/dal/model"
)

func newTUser(db *gorm.DB) tUser {
	_tUser := tUser{}

	_tUser.tUserDo.UseDB(db)
	_tUser.tUserDo.UseModel(&model.TUser{})

	tableName := _tUser.tUserDo.TableName()
	_tUser.ALL = field.NewField(tableName, "*")
	_tUser.ID = field.NewInt64(tableName, "id")
	_tUser.CreateTime = field.NewTime(tableName, "create_time")
	_tUser.UpdateTime = field.NewTime(tableName, "update_time")
	_tUser.Status = field.NewString(tableName, "status")
	_tUser.Email = field.NewString(tableName, "email")
	_tUser.Name = field.NewString(tableName, "name")
	_tUser.OrgID = field.NewInt64(tableName, "org_id")
	_tUser.Password = field.NewString(tableName, "password")
	_tUser.Phone = field.NewString(tableName, "phone")
	_tUser.Salt = field.NewString(tableName, "salt")
	_tUser.LastLoginTime = field.NewTime(tableName, "last_login_time")
	_tUser.UserStatus = field.NewString(tableName, "user_status")
	_tUser.Company = field.NewString(tableName, "company")
	_tUser.CertificationID = field.NewString(tableName, "certification_id")
	_tUser.CertificationName = field.NewString(tableName, "certification_name")
	_tUser.Birthday = field.NewString(tableName, "birthday")
	_tUser.WorkYear = field.NewString(tableName, "work_year")
	_tUser.CertificationPicURL = field.NewString(tableName, "certification_pic_url")
	_tUser.MiniAppsOpenID = field.NewString(tableName, "mini_apps_open_id")
	_tUser.UnionID = field.NewString(tableName, "union_id")
	_tUser.Sex = field.NewString(tableName, "sex")
	_tUser.Avatar = field.NewString(tableName, "avatar")
	_tUser.Nickname = field.NewString(tableName, "nickname")
	_tUser.ReceiveNotification = field.NewBool(tableName, "receive_notification")
	_tUser.UserID = field.NewString(tableName, "user_id")
	_tUser.AuditStatus = field.NewString(tableName, "audit_status")
	_tUser.OpenHuoKeBao = field.NewBool(tableName, "open_huo_ke_bao")

	_tUser.fillFieldMap()

	return _tUser
}

type tUser struct {
	tUserDo tUserDo

	ALL                 field.Field
	ID                  field.Int64
	CreateTime          field.Time
	UpdateTime          field.Time
	Status              field.String
	Email               field.String
	Name                field.String
	OrgID               field.Int64
	Password            field.String
	Phone               field.String
	Salt                field.String
	LastLoginTime       field.Time
	UserStatus          field.String
	Company             field.String
	CertificationID     field.String
	CertificationName   field.String
	Birthday            field.String
	WorkYear            field.String
	CertificationPicURL field.String
	MiniAppsOpenID      field.String
	UnionID             field.String
	Sex                 field.String
	Avatar              field.String
	Nickname            field.String
	ReceiveNotification field.Bool
	UserID              field.String
	AuditStatus         field.String
	OpenHuoKeBao        field.Bool

	fieldMap map[string]field.Expr
}

func (t tUser) Table(newTableName string) *tUser {
	t.tUserDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUser) As(alias string) *tUser {
	t.tUserDo.DO = *(t.tUserDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUser) updateTableName(table string) *tUser {
	t.ALL = field.NewField(table, "*")
	t.ID = field.NewInt64(table, "id")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UpdateTime = field.NewTime(table, "update_time")
	t.Status = field.NewString(table, "status")
	t.Email = field.NewString(table, "email")
	t.Name = field.NewString(table, "name")
	t.OrgID = field.NewInt64(table, "org_id")
	t.Password = field.NewString(table, "password")
	t.Phone = field.NewString(table, "phone")
	t.Salt = field.NewString(table, "salt")
	t.LastLoginTime = field.NewTime(table, "last_login_time")
	t.UserStatus = field.NewString(table, "user_status")
	t.Company = field.NewString(table, "company")
	t.CertificationID = field.NewString(table, "certification_id")
	t.CertificationName = field.NewString(table, "certification_name")
	t.Birthday = field.NewString(table, "birthday")
	t.WorkYear = field.NewString(table, "work_year")
	t.CertificationPicURL = field.NewString(table, "certification_pic_url")
	t.MiniAppsOpenID = field.NewString(table, "mini_apps_open_id")
	t.UnionID = field.NewString(table, "union_id")
	t.Sex = field.NewString(table, "sex")
	t.Avatar = field.NewString(table, "avatar")
	t.Nickname = field.NewString(table, "nickname")
	t.ReceiveNotification = field.NewBool(table, "receive_notification")
	t.UserID = field.NewString(table, "user_id")
	t.AuditStatus = field.NewString(table, "audit_status")
	t.OpenHuoKeBao = field.NewBool(table, "open_huo_ke_bao")

	t.fillFieldMap()

	return t
}

func (t *tUser) WithContext(ctx context.Context) *tUserDo { return t.tUserDo.WithContext(ctx) }

func (t tUser) TableName() string { return t.tUserDo.TableName() }

func (t tUser) Alias() string { return t.tUserDo.Alias() }

func (t *tUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUser) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 27)
	t.fieldMap["id"] = t.ID
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["status"] = t.Status
	t.fieldMap["email"] = t.Email
	t.fieldMap["name"] = t.Name
	t.fieldMap["org_id"] = t.OrgID
	t.fieldMap["password"] = t.Password
	t.fieldMap["phone"] = t.Phone
	t.fieldMap["salt"] = t.Salt
	t.fieldMap["last_login_time"] = t.LastLoginTime
	t.fieldMap["user_status"] = t.UserStatus
	t.fieldMap["company"] = t.Company
	t.fieldMap["certification_id"] = t.CertificationID
	t.fieldMap["certification_name"] = t.CertificationName
	t.fieldMap["birthday"] = t.Birthday
	t.fieldMap["work_year"] = t.WorkYear
	t.fieldMap["certification_pic_url"] = t.CertificationPicURL
	t.fieldMap["mini_apps_open_id"] = t.MiniAppsOpenID
	t.fieldMap["union_id"] = t.UnionID
	t.fieldMap["sex"] = t.Sex
	t.fieldMap["avatar"] = t.Avatar
	t.fieldMap["nickname"] = t.Nickname
	t.fieldMap["receive_notification"] = t.ReceiveNotification
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["audit_status"] = t.AuditStatus
	t.fieldMap["open_huo_ke_bao"] = t.OpenHuoKeBao
}

func (t tUser) clone(db *gorm.DB) tUser {
	t.tUserDo.ReplaceDB(db)
	return t
}

type tUserDo struct{ gen.DO }

//where("name=@name")
func (t tUserDo) FindByName(name string) (result map[string]interface{}, err error) {
	params := make(map[string]interface{}, 0)

	var generateSQL strings.Builder
	params["name"] = name
	generateSQL.WriteString("name=@name ")

	result = make(map[string]interface{})
	var executeSQL *gorm.DB
	if len(params) > 0 {
		executeSQL = t.UnderlyingDB().Where(generateSQL.String(), params).Take(result)
	} else {
		executeSQL = t.UnderlyingDB().Where(generateSQL.String()).Take(result)
	}
	err = executeSQL.Error
	return
}

func (t tUserDo) Debug() *tUserDo {
	return t.withDO(t.DO.Debug())
}

func (t tUserDo) WithContext(ctx context.Context) *tUserDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUserDo) Clauses(conds ...clause.Expression) *tUserDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUserDo) Returning(value interface{}, columns ...string) *tUserDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUserDo) Not(conds ...gen.Condition) *tUserDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUserDo) Or(conds ...gen.Condition) *tUserDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUserDo) Select(conds ...field.Expr) *tUserDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUserDo) Where(conds ...gen.Condition) *tUserDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tUserDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUserDo) Order(conds ...field.Expr) *tUserDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUserDo) Distinct(cols ...field.Expr) *tUserDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUserDo) Omit(cols ...field.Expr) *tUserDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUserDo) Join(table schema.Tabler, on ...field.Expr) *tUserDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tUserDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *tUserDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUserDo) Group(cols ...field.Expr) *tUserDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUserDo) Having(conds ...gen.Condition) *tUserDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUserDo) Limit(limit int) *tUserDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUserDo) Offset(offset int) *tUserDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tUserDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUserDo) Unscoped() *tUserDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUserDo) Create(values ...*model.TUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUserDo) CreateInBatches(values []*model.TUser, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUserDo) Save(values ...*model.TUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUserDo) First() (*model.TUser, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUser), nil
	}
}

func (t tUserDo) Take() (*model.TUser, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUser), nil
	}
}

func (t tUserDo) Last() (*model.TUser, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUser), nil
	}
}

func (t tUserDo) Find() ([]*model.TUser, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUser), err
}

func (t tUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUser, err error) {
	buf := make([]*model.TUser, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUserDo) FindInBatches(result *[]*model.TUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUserDo) Attrs(attrs ...field.AssignExpr) *tUserDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUserDo) Assign(attrs ...field.AssignExpr) *tUserDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUserDo) Joins(fields ...field.RelationField) *tUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tUserDo) Preload(fields ...field.RelationField) *tUserDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tUserDo) FirstOrInit() (*model.TUser, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUser), nil
	}
}

func (t tUserDo) FirstOrCreate() (*model.TUser, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUser), nil
	}
}

func (t tUserDo) FindByPage(offset int, limit int) (result []*model.TUser, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tUserDo) withDO(do gen.Dao) *tUserDo {
	t.DO = *do.(*gen.DO)
	return t
}
